class MazeObj {
    constructor() {
        this.aside = 200;
        this.xCount = 21;
        this.yCount = 21;
        this.cells = [];
        this.checkedCells = [];
        this.cellX, this.cellY;
        this.tmpX, this.tmpY;
        this.dirs = [];
        this.nextDir;
        this.inDigLoop;
        this.startPointTime = 0;
        this.goalPointTime = null;
        this.timeGraphic = createGraphics(400, 400);
				this.timeGraphic.textFont(myFont);
        this.timeGraphic.pixelDensity(displayDensity());
        this.timeGraphic.colorMode(HSB);
    }
    init() {
        stageMode = 0;
        this.dirs = [0, 1, 2, 3];
        this.inDigLoop = true;
        this.cells = Array.from(new Array(this.xCount), () => new Array(this.yCount).fill(null));
        for (let j = 0; j < this.yCount; j++) {
            for (let i = 0; i < this.xCount; i++) {
                this.cells[i][j] = new BlockObj(i, j, this.aside);
            }
        }
        this.cellX = floor(random(1, this.xCount - 2));
        if (this.cellX % 2 == 0) { this.cellX++; }
        this.cellY = floor(random(1, this.yCount - 2));
        if (this.cellY % 2 == 0) { this.cellY++; }
        this.cells[this.cellX][this.cellY].state = false;
        this.checkedCells.push(new Points(this.cellX, this.cellY));
    }
    drawFloor() {
        push();
        translate(0, 0, -150);
        ambientMaterial(0, 0, 90, 1);
        box(4200, 4200, 100);
        pop();
        push();
        translate(-this.aside * 10, -this.aside * 9, -110);
        ambientMaterial(240, 70, 100, 1);
        box(this.aside * .9, this.aside * .9, 50);
        pop();
        push();
        translate(this.aside * 10, this.aside * 9, -110);
        ambientMaterial(0, 70, 100, 1);
        box(this.aside * .9, this.aside * .9, 50);
        pop();
        if (this.inDigLoop) {
            push();
            this.timeGraphic.background(230, 25, 100, 1);
            this.timeGraphic.textSize(300);
            this.timeGraphic.fill(0, 0, 100, 1);
            this.timeGraphic.text(this.checkedCells.length, width / 2 - 190, height / 2 + 20);
            translate(0, 0, 3550);
            fill(0, 100, 100, 1);
            texture(this.timeGraphic);
            plane(200, 200);
            pop();
        }
    }

 drawWall() {
        for (let j = 0; j < this.yCount; j++) {
            for (let i = 0; i < this.xCount; i++) {
                this.cells[i][j].drawBox(this.aside);
            }
        }
    }
    digMaze(key) {
        if (this.dirs.length == 0) {
            let pickNextIndex = floor(random(0, this.checkedCells.length));
            let othercheckedCell = this.checkedCells[pickNextIndex];
            this.checkedCells.splice(pickNextIndex, 1);
            if (this.checkedCells.length == 0) {
                this.cells[0][1].state = false;
                this.cells[this.xCount - 1][this.yCount - 2].state = false;
                this.inDigLoop = false;
                key.setOrbs(this);
                stageMode += 1;
            }
            this.cellX = othercheckedCell.x;
            this.cellY = othercheckedCell.y;
            this.dirs = [0, 1, 2, 3];
        }
        let tmpDirIndex = floor(random(0, this.dirs.length));
        this.nextDir = this.dirs[tmpDirIndex];
        this.dirs.splice(tmpDirIndex, 1);
        switch (this.nextDir) {
            case 0: this.tmpX = 0; this.tmpY = -2; break;
            case 1: this.tmpX = 2; this.tmpY = 0; break;
            case 2: this.tmpX = 0; this.tmpY = 2; break;
            case 3: this.tmpX = -2; this.tmpY = 0; break;
            default: break;
        }
        let nextX = this.cellX + this.tmpX, nextY = this.cellY + this.tmpY;
        let betNextX = this.cellX + this.tmpX / 2, betNextY = this.cellY + this.tmpY / 2;
        if (nextX >= 0 && nextX < this.xCount && nextY >= 0 && nextY < this.yCount) {
            if (this.cells[nextX][nextY].state == true) {
                this.cells[nextX][nextY].state = false;
                this.cells[betNextX][betNextY].state = false;
                this.checkedCells.push(new Points(this.cellX, this.cellY));
                this.cellX = nextX; this.cellY = nextY; this.dirs = [0, 1, 2, 3];
            }
        }
    }
}
