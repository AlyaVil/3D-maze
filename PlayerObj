class PlayerObj {
    constructor() {
        this.pos = createVector(0, 0, 3920);
        this.sight = createVector(0, 0, 0);
        this.dir = PI;
        this.upVector = createVector(0, 1, 0);
        this.dist = createVector(0, 0, 3920);
        this.distSight = createVector(0, 0, 0);
        this.distUp = createVector(0, 1, 0);
        this.prePos = createVector(0, 0, 3920);
        this.preSight = createVector(0, 0, 0);
        this.preUpVector = createVector(0, 1, 0);
        this.easeStartTime = Date.now();
        this.easeMoveTime = 0;
        this.easeMoveLimit = 0;
        this.isEaseMove = false;
        this.easeInOutQuad = function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t };
    }
    cameraMode(isOrtho) {
        if (isOrtho) {
            camera(0, 0, 4000, 0, 0, 0, 0, 1, 0);
            ortho(-2200, 2200, -2200, 2200, 1, 6500);
        } else {
            camera(this.pos.x, this.pos.y, this.pos.z, this.sight.x, this.sight.y, this.sight.z, this.upVector.x, this.upVector.y, this.upVector.z);
            perspective(PI / 3.0, width / height, 1, 6000);
        }
    }
    easeMove(stage, aside, t) {
        if (!this.isEaseMove) {
            this.isEaseMove = true;
            this.easeStartTime = Date.now();
            this.easeMoveLimit = t;
            if (stage == 1) {
                this.dist.x = aside * 10;
                this.dist.y = aside * 9;
                this.dist.z = -20;
                this.dir = PI;
                this.distSight.x = cos(this.dir) * 2000 + this.dist.x;
                this.distSight.y = sin(this.dir) * 2000 + this.dist.y;
                this.distSight.z = this.dist.z;
                this.distUp.x = 0;
                this.distUp.y = 0;
                this.distUp.z = -1;
            } else if (stage == 3) {
                this.dist.x = this.pos.x;
                this.dist.y = this.pos.y;
                this.dist.z = this.pos.z;
                this.dir = -HALF_PI;
                this.distSight.x = cos(this.dir) * 2000 + this.dist.x;
                this.distSight.y = sin(this.dir) * 2000 + this.dist.y;
                this.distSight.z = this.dist.z;
                this.distUp.x = this.upVector.x;
                this.distUp.y = this.upVector.y;
                this.distUp.z = this.upVector.z;
             
             } else if (stage == 4) {
this.dist.x = this.pos.x;
this.dist.y = this.pos.y;
this.dist.z = this.pos.z;
this.dir = 0;
this.distSight.x = cos(this.dir) * 2000 + this.dist.x;
this.distSight.y = sin(this.dir) * 2000 + this.dist.y;
this.distSight.z = this.dist.z;
this.distUp.x = this.upVector.x;
this.distUp.y = this.upVector.y;
this.distUp.z = this.upVector.z;

} else if (stage == 5) { 
 this.dist.x = 0; 
 this.dist.y = 0; 
 this.dist.z = 4000; 
 this.distSight.x = 0; 
 this.distSight.y = 0; 
 this.distSight.z = 0; 
 this.distUp.x = 0; 
 this.distUp.y = 1; 
 this.distUp.z = 0; 
 }
this.prePos = this.pos; 
            this.preSight = this.sight; 
            this.preUpVector = this.upVector; 
        } 
    } 
    update(field, key) { 
        if (this.isEaseMove) { 
            this.easeMoveTime = (Date.now() - this.easeStartTime) / this.easeMoveLimit; 
            this.pos.x = this.prePos.x + (this.dist.x - this.prePos.x) * this.easeInOutQuad(this.easeMoveTime); 
            this.pos.y = this.prePos.y + (this.dist.y - this.prePos.y) * this.easeInOutQuad(this.easeMoveTime); 
            this.pos.z = this.prePos.z + (this.dist.z - this.prePos.z) * this.easeInOutQuad(this.easeMoveTime); 
            this.sight.x = this.preSight.x + (this.distSight.x - this.preSight.x) * this.easeInOutQuad(this.easeMoveTime); 
            this.sight.y = this.preSight.y + (this.distSight.y - this.preSight.y) * this.easeInOutQuad(this.easeMoveTime);
this.sight.z = this.preSight.z + (this.distSight.z - this.preSight.z) * this.easeInOutQuad(this.easeMoveTime); 
            this.upVector.x = this.preUpVector.x + (this.distUp.x - this.preUpVector.x) * this.easeInOutQuad(this.easeMoveTime); 
            this.upVector.y = this.preUpVector.y + (this.distUp.y - this.preUpVector.y) * this.easeInOutQuad(this.easeMoveTime); 
            this.upVector.z = this.preUpVector.z + (this.distUp.z - this.preUpVector.z) * this.easeInOutQuad(this.easeMoveTime); 
            if (Date.now() - this.easeStartTime > this.easeMoveLimit) { 
                this.isEaseMove = false; 
                stageMode += 1; 
            } 
        } 
        if (this.pos.x < field.cells[0][1].x + field.aside / 3 && key.left.length == 0 && stageMode == 2) { 
            stageMode += 1; 
        }
if (stageMode == 2) { 
            push(); 
            translate(this.pos.x, this.pos.y, -50); 
            rotateZ(this.dir - HALF_PI); 
            specularMaterial(240, 70, 100, 1); 
            cone(20, 100); 
            pop(); 
        } 
    }
getKeyInput(field) { 
        if (stageMode == 2) { 
            let tempPosVec = createVector(this.pos.x + field.aside / 2, this.pos.y + field.aside / 2); 
            let sightVec = p5.Vector.sub(this.sight, this.pos); 
            sightVec.normalize(); 
            sightVec.mult(10); 
            let tempVec; 
            if (keyIsDown(65)) { 
                this.dir -= PI / 90; 
            }
if (keyIsDown(87) && cameraIsOrtho == false) { 
                tempVec = p5.Vector.add(tempPosVec, sightVec); 
                if (this.collideCheck(tempVec, field)) { 
                    this.pos.add(sightVec); 
                } 
            } 
            if (keyIsDown(68)) { 
                this.dir += PI / 90; 
            } 
            if (keyIsDown(83) && cameraIsOrtho == false) { 
                tempVec = p5.Vector.sub(tempPosVec, sightVec); 
                if (this.collideCheck(tempVec, field)) { 
                    this.pos.sub(sightVec); 
                } 
            } 
            this.sight.x = cos(this.dir) * 2000 + this.pos.x; 
            this.sight.y = sin(this.dir) * 2000 + this.pos.y; 
        } 
    }
